AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cardoc-service

  Sample SAM Template for cardoc-service

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 180
    CodeUri: src/
    Architectures:
      - x86_64

Resources:
  VehiclesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: vehicles-table
      AttributeDefinitions:
        - AttributeName: vehicleName
          AttributeType: S
      KeySchema:
        - AttributeName: vehicleName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  VehiclesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,PUT,POST,DELETE'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  VehiclesFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "VehiclesFunctionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !GetAtt VehiclesTable.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::vehicles-bucket-unique-identifier/*"

  VehiclesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vehicles-bucket-unique-identifier
      AccessControl: Private

  VehiclesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: vehicles.handler
      Role: !GetAtt VehiclesFunctionRole.Arn
      Events:
        GetVehicles:
          Type: Api
          Properties:
            RestApiId: !Ref VehiclesApi
            Path: /vehicles
            Method: get
        PostVehicles:
          Type: Api
          Properties:
            RestApiId: !Ref VehiclesApi
            Path: /vehicles
            Method: post
        PutVehicles:
          Type: Api
          Properties:
            RestApiId: !Ref VehiclesApi
            Path: /vehicles
            Method: put
        DeleteVehicles:
          Type: Api
          Properties:
            RestApiId: !Ref VehiclesApi
            Path: /vehicles
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - vehicles.ts

Outputs:
  VehiclesApi:
    Description: API Gateway endpoint URL for Prod stage for VehiclesApi function
    Value: !Sub https://${VehiclesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  VehiclesFunction:
    Description: VehiclesFunction Lambda Function ARN
    Value: !GetAtt VehiclesFunction.Arn
  VehiclesFunctionIamRole:
    Description: IAM Role created for VehiclesFunction function
    Value: !GetAtt VehiclesFunctionRole.Arn
  VehiclesBucketName:
    Description: S3 bucket for storing vehicle images and documents
    Value: !Ref VehiclesBucket
